name:  Job Exec Per Env
# We want to determine if we should run a remote job based on two possibilities:
# 1. The user has specified to run the remote job
# 2. The user has specified an environment that requires the remote job to be run
# Since the remote repo may not have the same environment names as the local repo,
# we need to define the environment names of the remote repo environment names based on
# the local repo environment names.

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to execute the job'
        type: environment
        required: true
        default: 'DEV'
      run-remote-job:
        description: 'Run remote job?'
        type: boolean
        required: true
        default: true

jobs:

  validate-environment:
    runs-on: ubuntu-22.04
    name: Validate Environment
    environment: ${{ inputs.environment }}
    outputs:
      ALTERNATE_ENVIRONMENT: ${{ steps.set-alternate-environment.outputs.alternate_environment }}
      RUN_REMOTE_JOB: ${{ steps.set-alternate-environment.outputs.run-remote-job }}
    steps:
      - name: Validate Environment ${{ inputs.environment }}
        run: |
          echo "Validating environment ${{ inputs.environment }}"
          echo "Input run-remote-job: ${{ inputs.run-remote-job }}"

      - name: Set Alternate Environment
        id: set-alternate-environment
        run: |
          function skip_remote_job() {
            echo "run-remote-job=false" >> "$GITHUB_OUTPUT"
            echo "Skipping remote job for ${{ inputs.environment }}" >> "$GITHUB_STEP_SUMMARY"
          }
          function set_alternate_environment() {
            echo "run-remote-job=true" >> "$GITHUB_OUTPUT"
            echo "alternate_environment=$1" >> "$GITHUB_OUTPUT"
            echo "Alternate Environment for ${{ inputs.environment }} is $1" >> "$GITHUB_STEP_SUMMARY"
          }

          if [[ "${{ inputs.environment }}" == "devtest01" ]]; then
            #ALT_ENV="DEV"
            set_alternate_environment("DEV")
          elif [[ "${{ inputs.environment }}" == "stage01" ]]; then
            ALT_ENV="STAGING"
            echo "run-remote-job=true" >> "$GITHUB_OUTPUT"
          elif [[ "${{ inputs.environment }}" == "prod01" ]]; then
            ALT_ENV="PROD"
            echo "run-remote-job=false" >> "$GITHUB_OUTPUT"
            # set action summary message
            echo "Skipping remote job for ${{ inputs.environment }}" >> "$GITHUB_STEP_SUMMARY"
          # if env name has test in it as a substring and ends in a two digit number
          # matches: [petest01, testqa01, thisisatestexample01, test01]
          elif [[ "${{ inputs.environment }}" =~ .*test.*[0-9]{2}$ ]]; then
            ALT_ENV="TESTING"
            skip_remote_job
          else
            echo "Remote environment not defined for ${{ inputs.environment }}"
            echo "run-remote-job=false" >> "$GITHUB_OUTPUT"
            skip_remote_job
          fi
          #echo "alternate_environment=$ALT_ENV" >> "$GITHUB_OUTPUT"

  verify-outputs:
    runs-on: ubuntu-22.04
    name: Verify Outputs
    needs: validate-environment
    steps:
      - name: Verify Outputs
        run: |
          echo "Alternate Environment: ${{ needs.validate-environment.outputs.ALTERNATE_ENVIRONMENT }}"
          echo "Run Remote Job: ${{ needs.validate-environment.outputs.RUN_REMOTE_JOB }}"

  # An interesting note here is that if we have a previously undefined environment and pass it
  # to the environment parameter of the job this will create the environment in this repo.
  # This can be useful for future jobs such as propagating a new environment to other repos.
  execute-remote-job:
    # We need this job skipped if user unchecks the run-remote-job checkbox OR
    # if the prior job outputs run-remote-job==false with the prior job output
    # taking precedence meaning that even if the user checks the run-remote-job
    # we will skip this job if the prior job outputs run-remote-job==false
    if: inputs.run-remote-job == true && needs.validate-environment.outputs.RUN_REMOTE_JOB == 'true'
    name: Execute Remote Job
    needs: validate-environment
    uses: 'shadowzen-labs/remote-workflows/.github/workflows/run-test.yml@main'
    with:
      environment: ${{ needs.validate-environment.outputs.alternate_environment }}

  execute-local-job:
    runs-on: ubuntu-22.04
    name: Execute Local Job
    needs: validate-environment
    environment: ${{ inputs.environment }}
    steps:
      - name: Execute Local Job
        run: |
          echo "Executing local job on environment ${{ inputs.environment }}"
